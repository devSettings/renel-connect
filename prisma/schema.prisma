generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum PermissionName {
  CREATE_USER
  VIEW_USER
  UPDATE_USER
  DELETE_USER
  MANAGE_USER_PERMISSIONS
  RESET_USER_PASSWORD
  CREATE_PRODUCT
  VIEW_PRODUCT
  UPDATE_PRODUCT
  DELETE_PRODUCT
  MANAGE_PRODUCT_PRICING
  MANAGE_PRODUCT_DISCOUNTS
  VIEW_INVENTORY
  UPDATE_INVENTORY
  MANAGE_SUPPLIERS
  VIEW_SUPPLY_CHAIN
  CREATE_TRANSACTION
  VIEW_TRANSACTION
  UPDATE_TRANSACTION
  DELETE_TRANSACTION
  PROCESS_REFUND
  APPLY_DISCOUNT
  CREATE_CUSTOMER
  VIEW_CUSTOMER
  UPDATE_CUSTOMER
  DELETE_CUSTOMER
  VIEW_SALES_REPORTS
  VIEW_INVENTORY_REPORTS
  VIEW_FINANCIAL_REPORTS
  EXPORT_REPORTS
  MANAGE_SETTINGS
  MANAGE_PAYMENT_METHODS
  MANAGE_TAX_SETTINGS
  CONFIGURE_NOTIFICATIONS
  CONFIGURE_AUDIT_LOGS
  VIEW_PERMISSIONS
  ASSIGN_PERMISSIONS
  MANAGE_ROLES
  VIEW_AUDIT_LOGS
  MANAGE_TWO_FACTOR_AUTH
  VIEW_SYSTEM_LOGS
  DEBUG_SYSTEM
  DEPLOY_UPDATES
  ACCESS_API
  PERFORM_BACKUP
  CONFIGURE_INTEGRATIONS
}

model Permission {
  id          String         @id @default(uuid())
  label       String         @unique @db.VarChar(250)
  value       PermissionName @unique
  description String
  users       User[]
}

enum Role {
  CUSTOMER
  CASHIER
  MANAGER
  SUPERVISOR
  ADMIN
  DEVELOPER
  UNKNOWN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  BANNED
}

enum Language {
  FRENCH
  ENGLISH
  SPANISH
  CREOLE
}

enum Gender {
  MALE
  FEMALE
}

model User {
  id                String            @id @default(cuid())
  firstName         String            @map("first_name") @db.VarChar(50)
  lastName          String            @map("last_name") @db.VarChar(50)
  email             String?           @db.VarChar(100)
  fullNameSlug      String            @unique @db.VarChar(255)
  birthDate         DateTime?         @map("birth_date") @db.Date
  gender            Gender
  preferredLanguage Language          @default(ENGLISH) @map("preferred_language")
  status            UserStatus        @default(INACTIVE)
  lastLogin         DateTime?         @map("last_login")
  customer          Customer?
  idProvided        AcceptedTypeOfID? @map("id_provided")
  idNumber          String?           @db.VarChar(20)
  createdAt         DateTime          @default(now())
  Role              Role
  Product           Product[]
  Order             Order[]
  Expense           Expense[]
  Income            Income[]
  Lost              Lost[]
  Aquisition        Aquisition[]
  permissions       Permission[]

  @@unique([idProvided, idNumber])
  @@unique([firstName, lastName])
  @@index([firstName, lastName])
}

enum AcceptedTypeOfID {
  PASSPORT
  DRIVERS_LICENSE
  GOVERMENT_ISSUED_ID
  STUDENT_ID
}

enum Membership {
  BRONZE
  SILVER
  GOLD
  PLATINUM
}

model Customer {
  id               String     @id @default(cuid())
  phoneNumber      String     @map("phone_number") @db.VarChar(20)
  membership       Membership @default(BRONZE)
  loyaltyPoints    BigInt     @default(0) @map("loyalty_points") @db.BigInt
  lastPurchaseDate String?    @map("last_purchase_date")
  totalOrders      Int        @default(0) @map("total_orders")
  totalSpend       BigInt     @default(0) @map("total_spend") @db.BigInt
  user             User       @relation(fields: [userId], references: [id])
  userId           String     @unique @map("user_id")
  Order            Order[]

  @@unique([phoneNumber])
}

// Producs
enum ProductType {
  INVENTORY
  SERVICE
  NON_INVENTORY
  DIGITAL
}

enum ProductStatus {
  DRAFT
  ACTIVE
  INACTIVE
  ARCHIVED
}

model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  slug      String    @unique
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  Product   Product[]

  @@index([name])
}

model Product {
  id               String             @id @default(cuid())
  name             String             @unique
  slug             String             @unique
  sku              String             @unique
  sellingPrice     Float              @map("selling_price")
  department       Collection
  category         Category           @relation(fields: [categoryId], references: [id])
  type             ProductType
  status           ProductStatus
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")
  categoryId       String
  createdBy        User               @relation(fields: [createdById], references: [id])
  createdById      String             @map("created_by_id")
  InventoryProduct InventoryProduct[]
  ServicesProduct  ServicesProduct?
  OrderItem        OrderItem[]
  Lost             Lost[]
  Aquisition       Aquisition[]

  @@index([slug])
  @@index([name])
}

model InventoryProduct {
  id                   String   @id @default(cuid())
  product              Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId            String   @unique @map("product_id")
  quantityInStock      Int      @default(0) @map("quantity_in_stock")
  averageUnitCostPrice Decimal  @default(0) @db.Decimal(10, 2)
  reorderLevel         Int      @map("reorder_level")
  createdAt            DateTime @default(now()) @map("created_at")
  lastPurchaseDate     String?  @map("last_purchase_date")
  updatedAt            DateTime @updatedAt @map("updated_at")
}

model ServicesProduct {
  id              String   @id @default(cuid())
  product         Product  @relation(fields: [productId], references: [id])
  productId       String   @unique
  serviceLocation String
  serviceDuration Int
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
}

model Supplier {
  id               String       @id @unique @default(cuid())
  name             String       @unique
  slug             String       @unique
  email            String       @unique
  phone            String       @unique
  product_supplied String?      @db.Text()
  address          String
  created_at       DateTime     @default(now())
  updated_at       DateTime     @updatedAt
  Aquisition       Aquisition[]

  @@index([slug])
  @@index([email])
  @@index([name])
}

// Orders

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}

enum OrderSource {
  WEB
  MOBILE
  POS
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  CHECK
  WIRE_TRANSFER
}

enum Collection {
  ROOM
  DRINK
  FOOD
  OTHER
}

model Order {
  id             String        @id @default(cuid())
  reference      String        @unique @db.VarChar(12)
  category       Collection
  cashier        User          @relation(fields: [cashierId], references: [id])
  cashierId      String        @map("cashier_id")
  customer       Customer      @relation(fields: [customerId], references: [id])
  customerId     String        @map("customer_id")
  paymentMethod  PaymentMethod
  source         OrderSource
  totalPrice     Decimal       @map("total_price") @db.Decimal(10, 2)
  totalItems     Int           @map("total_items")
  orderDate      String        @map("order_date")
  amountReceived Float         @map("amount_received")
  change         Float         @default(0) @map("change")
  roomNumber     Int?          @map("room_number")
  OrderItem      OrderItem[]
  createdAt      DateTime      @default(now()) @map("created_at")
}

model OrderItem {
  id         String   @id @default(cuid())
  order      Order    @relation(fields: [orderId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])
  orderId    String   @map("order_id")
  quantity   Int      @map("quantity")
  unitPrice  Decimal  @map("unit_price") @db.Decimal(10, 2)
  totalPrice Decimal  @map("total_cost") @db.Decimal(10, 2)
  orderDate  String   @map("order_date")
  discount   Float?   @default(0) @map("discount")
  createdAt  DateTime @default(now()) @map("created_at")
  productId  String   @map("product_id")
  // roomNumber Int?     @map("room_number")
}

enum TypeOfTransaction {
  EXPENSE
  INCOME
  LOST
  AQUISITION
}

model ExpenseCategory {
  id      String    @id @default(cuid())
  title   String    @db.VarChar(250)
  slug    String    @unique
  Expense Expense[]
}

model Expense {
  id                String            @id @default(cuid())
  title             String            @db.VarChar(250)
  category          ExpenseCategory   @relation(fields: [expenseCategoryId], references: [id])
  description       String?           @db.Text
  amount            Float             @db.Float
  typeOfTransaction TypeOfTransaction @default(EXPENSE) @map("type_of_transaction")
  madeBy            User              @relation(fields: [userId], references: [id])
  userId            String            @map("user_id")
  expenseDate       String            @map("expense_date")
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")
  expenseCategoryId String            @map("expense_category_id")
}

enum IncomeCategory {
  Sale_REVENUE
  INVESTMENT
  LOAN
}

model Income {
  id                String            @id @default(cuid())
  title             String            @db.VarChar(250)
  category          IncomeCategory
  description       String?           @db.Text
  amount            Float             @db.Float
  typeOfTransaction TypeOfTransaction @default(INCOME) @map("type_of_transaction")
  incomeDate        String            @map("income_date")
  madeBy            User              @relation(fields: [userId], references: [id])
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")
  userId            String            @map("user_id")
}

model Lost {
  id                String            @id @default(cuid())
  product           Product           @relation(fields: [productId], references: [id])
  description       String            @db.Text
  quantityOfItems   Int               @map("quantity_of_items")
  typeOfTransaction TypeOfTransaction @default(LOST) @map("type_of_transaction")
  unitPrice         Decimal           @map("unit_price") @db.Decimal(10, 2)
  lostDate          String            @map("lost_date")
  madeBy            User              @relation(fields: [userId], references: [id])
  userId            String            @map("user_id")
  totalLost         Decimal           @map("total_lost") @db.Decimal(10, 2)
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")
  productId         String
}

model Aquisition {
  id                   String            @id @default(cuid())
  product              Product           @relation(fields: [productId], references: [id])
  productId            String            @map("product_id")
  suplier              Supplier          @relation(fields: [supplierId], references: [id])
  typeOfTransaction    TypeOfTransaction @default(AQUISITION) @map("type_of_transaction")
  supplierId           String            @map("suplier_id")
  quantityBought       Int               @map("quantity_bought")
  averageUnitCostPrice Decimal           @map("average_unit_cost_price") @db.Decimal(10, 2)
  aquisitionDate       String            @map("aquisition_date")
  totalCost            Decimal           @default(0) @map("total_cost") @db.Decimal(10, 2)
  madeBy               User              @relation(fields: [userId], references: [id])
  expiredDate          String            @map("expired_date")
  createdAt            DateTime          @default(now()) @map("created_at")
  updatedAt            DateTime          @updatedAt @map("updated_at")
  userId               String
}
